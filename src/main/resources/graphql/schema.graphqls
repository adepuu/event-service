type Query {
    event(id: ID!): Event
    events(limit: Int, offset: Int): [Event!]!
    category(id: ID!): Category
    categories: [Category!]!
    venue(id: ID!): Venue
    venues(limit: Int, offset: Int): [Venue!]!
    user(id: ID!): User
    users(limit: Int, offset: Int): [User!]!
    me: User
    secrit: String!
}

type Mutation {
    # Event CRUD
    createEvent(input: CreateEventInput!): Event!
    updateEvent(id: ID!, input: UpdateEventInput!): Event!
    deleteEvent(id: ID!): Boolean!

    # Category CRUD
    createCategory(input: CreateCategoryInput!): Category!
    updateCategory(id: ID!, input: UpdateCategoryInput!): Category!
    deleteCategory(id: ID!): Boolean!

    # Venue CRUD
    createVenue(input: CreateVenueInput!): Venue!
    updateVenue(id: ID!, input: UpdateVenueInput!): Venue!
    deleteVenue(id: ID!): Boolean!

    # User CRUD
    createUser(input: CreateUserInput!): User!
    updateUser(id: ID!, input: UpdateUserInput!): User!
    deleteUser(id: ID!): Boolean!

    # Authentication
    login(username: String!, password: String!): AuthPayload!
    logout: Boolean!
}

type Event {
    id: ID!
    title: String!
    description: String
    startTime: DateTime!
    endTime: DateTime!
    venue: Venue!
    category: Category!
    organizer: User!
}

type Category {
    id: ID!
    name: String!
}

type Venue {
    id: ID!
    name: String!
    address: String!
    city: String!
    state: String!
    country: String!
    postalCode: String!
}

type User {
    id: ID!
    username: String!
    email: String!
    role: UserRole!
}

enum UserRole {
    ORGANIZER
    ADMIN
    USER
}

type AuthPayload {
    token: String!
    role: UserRole!
}

input CreateEventInput {
    title: String!
    description: String
    startTime: DateTime!
    endTime: DateTime!
    venueId: ID!
    categoryId: ID!
    organizerId: ID!
}

input UpdateEventInput {
    title: String
    description: String
    startTime: DateTime
    endTime: DateTime
    venueId: ID
    categoryId: ID
    organizerId: ID
}

input CreateCategoryInput {
    name: String!
}

input UpdateCategoryInput {
    name: String!
}

input CreateVenueInput {
    name: String!
    address: String!
    city: String!
    state: String!
    country: String!
    postalCode: String!
}

input UpdateVenueInput {
    name: String
    address: String
    city: String
    state: String
    country: String
    postalCode: String
}

input CreateUserInput {
    username: String!
    email: String!
    password: String!
}

input UpdateUserInput {
    username: String
    email: String
    password: String
    role: UserRole
}

scalar DateTime
@specifiedBy(url:
"https://scalars.graphql.org/andimarek/date-time.html"
)